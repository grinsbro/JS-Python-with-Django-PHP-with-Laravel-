// Главный пакет всегда должен называться main. Это обязательное требование языка Go. Он указывает, что данный файл является исполняемым файлом, а не библиотекой или пакетом.
// Пакет main - это точка входа в программу. Когда запускаешь программу, Go ищет функцию main в пакете main и начинает выполнение с нее.
// package main // Пакеты - это своего рода вид модульности в Go, но модулями не являются. Чтобы не  писать все в одном файле можно разбить логику по разным пакетам

// // import "fmt" // FMT - это пакет, который предоставляет функции для форматирования ввода и вывода. Он позволяет выводить текст в консоль и считывать данные с клавиатуры.
// import (
// 	"fmt"
// 	"math"
) // math это еще один встроенный пакет, который дает возможность производить сложные математические манипуляции
// func main() { // Функция main - это точка входа в программу. Когда запускаешь программу, Go ищет функцию main в пакете main и начинает выполнение с нее.
// 	Функция main - это обязательная функция, которая должна быть в каждом исполняемом файле на Go. Она является точкой входа в программу.
// 	fmt.Printf("Hello, World!")
// }

// Модули в Go это приложения, которые состоят из пакетов. То есть пакеты это составная часть модулей.
// Чтобы инициализировать приложение нужно иметь модуль. Просто с пакетом не получится получить бинарник и выпадет ошибка.
// Чтобы инициализировать модуль нужно выполнить команду go mod init <имя_модуля>. Имя модуля должно быть уникальным и не совпадать с другими модулями. Обычно это имя репозитория на GitHub или другом сервисе. Например, github.com/username/repo_name.
// Чтобы собрать приложение нужно выполнить команду go build. После этого приложение скомпилируется и будет готово к запуску.
// После этого создается файл .exe(бинарный), который уже можно запускать где угодно, даже если в системе не установлен Go.

// GO это типизированный язык. Он не даст производить манипуляции с разными типами данных
// func main() {
// 	var userHeight float64 = 1.75
// 	var userWeight float64 = 90
// 	var IMT = userWeight / math.Pow(userHeight, 2)
// 	fmt.Print(IMT)
// }

// Можно определять переменные и без var, а с использованием walrus
// func main() {
// 	userHeight := 1.75 // := это короткая форма объявления переменной. Она позволяет объявить переменную и присвоить ей значение в одной строке. При этом тип переменной определяется автоматически на основе присваиваемого значения.
// 	// Но в таком случае невозможно объявить тип данных для переменной, он будет присвоен автоматически
// 	var userWeight float64
// 	userWeight = 90 // Можно также объявить переменную таким образом, но это не рекомендуется делать, так как это усложняет код и делает его менее читаемым. Лучше использовать короткую форму объявления переменной.	
// 	var test1, test2 = 1, 2 Можно объявить несколько переменных в одной строке, но это не рекомендуется делать, так как это усложняет код и делает его менее читаемым. Лучше использовать короткую форму объявления переменной.
// 	IMT := userWeight / math.Pow(userHeight, 2) // := это короткая форма объявления переменной. Она позволяет объявить переменную и присвоить ей значение в одной строке. При этом тип переменной определяется автоматически на основе присваиваемого значения.
// 	fmt.Print(IMT)
// }

// Константы
// func main(){
// 	const IMTPow = 2 // Константы - это неизменяемые значения, которые не могут быть изменены после объявления. Они могут быть объявлены с помощью ключевого слова const. Константы могут быть любого типа данных, включая пользовательские типы.
// 	// Константы могут untyped. Это значит, что значение констант может быть конвертировано в любой тип данных.
// 	userHeight := 1.75
// 	var userWeight float64
// 	userWeight = 90	
// 	IMT := userWeight / math.Pow(userHeight, IMTPow)
// 	fmt.Print(IMT)
// }